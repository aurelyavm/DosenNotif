@startuml "DosenNotif - Class Diagram"
!pragma layout smetana
skinparam classAttributeIconSize 0
skinparam backgroundColor white
skinparam ArrowColor #666666
skinparam packageStyle rectangle

' Model
package "Model" #DEEBD8 {
  class User {
    + id: String
    + name: String
    + email: String
    + nidn: String
    + notificationPreferences: NotificationPreferences
  }

  class Schedule {
    + id_dosen: String
    + nama_dosen: String
    + kode_mata_kuliah: String
    + nama_mata_kuliah: String
    + kelas: String
    + hari: String
    + jam_mulai: String
    + jam_selesai: String
    + ruang: String
    + getFormattedDay(): String
    + getTimeRange(): String
    + getDayOfWeekNumber(): Int
  }

  class ScheduleNotification {
    + id: String
    + scheduleId: String
    + title: String
    + message: String
    + scheduledTime: Long
    + actualScheduleTime: Long
    + room: String
    + courseName: String
    + isRead: Boolean
  }

  class NotificationPreferences {
    + enabled: Boolean
    + soundEnabled: Boolean
    + vibrationEnabled: Boolean
    + distanceThresholds: Map<String, Int>
  }

  class ScheduleResponse {
    + status: String
    + message: String
    + data: List<Schedule>
  }
}

' Repository
package "Repository" #D5E8F9 {
  class ScheduleRepository {
    - apiService: ApiService
    - firestore: FirebaseFirestore
    + getLecturerSchedule(lecturerNidn: String, period: String): Resource<List<Schedule>>
    + saveNotification(userId: String, notification: ScheduleNotification): Resource<String>
    + getUserNotifications(userId: String): Resource<List<ScheduleNotification>>
    + markNotificationAsRead(userId: String, notificationId: String): Resource<Unit>
  }
}

' API
package "API" #D5E1F9 {
  object ApiClient {
    - BASE_URL: String
    + create(): ApiService
  }

  interface ApiService {
    + getLecturerSchedule(idProgramStudi: RequestBody, idPeriode: RequestBody): ScheduleResponse
  }
}

' ViewModel
package "ViewModel" #F9E4D5 {
  class HomeViewModel {
    - repository: ScheduleRepository
    + userData: LiveData<User>
    + todaySchedules: LiveData<List<Schedule>>
    + distanceFromCampus: LiveData<Float>
    + loadUserData()
    + loadSchedules(nidn: String)
    + updateCurrentLocation(location: Location)
  }

  class CalendarViewModel {
    - repository: ScheduleRepository
    + schedulesByDay: LiveData<Map<String, List<Schedule>>>
    + loadUserData()
    + loadSchedules(nidn: String, period: String)
  }

  class NotificationViewModel {
    - repository: ScheduleRepository
    + notificationsState: StateFlow<Resource<List<ScheduleNotification>>>
    + selectedNotification: LiveData<ScheduleNotification>
    + loadNotifications()
    + getNotificationById(notificationId: String)
    + markNotificationAsRead(notificationId: String)
  }

  class ProfileViewModel {
    - firestore: FirebaseFirestore
    + userData: LiveData<User>
    + updateNotificationPreferences(preferences: NotificationPreferences)
    + signOut()
  }
}

' UI
package "UI" #FFF9D5 {
  class MainActivity {
    + onCreate(savedInstanceState: Bundle)
    + requestRequiredPermissions()
  }

  class HomeFragment {
    - viewModel: HomeViewModel
    - scheduleAdapter: ScheduleAdapter
    + onCreateView(): View
    + refreshData()
    + requestLocationUpdates()
  }

  class CalendarFragment {
    - viewModel: CalendarViewModel
    - scheduleAdapter: ScheduleDayAdapter
    + onCreateView(): View
    + filterSchedules()
  }

  class NotificationFragment {
    - viewModel: NotificationViewModel
    - notificationAdapter: NotificationAdapter
    + onCreateView(): View
    + observeNotifications()
  }

  class ProfileFragment {
    - viewModel: ProfileViewModel
    + onCreateView(): View
    + saveSettings()
  }

  class NotificationDetailActivity {
    - viewModel: NotificationViewModel
    + onCreate(savedInstanceState: Bundle)
    + observeSelectedNotification()
  }
}

' Utilities
package "Utils" #E9E9E9 {
  object LocationUtils {
    + calculateDistanceFromCampus(latitude: Double, longitude: Double): Float
    + getNotificationDelay(distanceInKm: Float): Int
    + getLocationUpdates(context: Context): Flow<Location>
    + getLastLocation(context: Context): Location?
  }

  object NotificationUtils {
    + createNotificationChannel(context: Context)
    + scheduleNotification(context: Context, schedule: Schedule, delayMinutes: Int)
    + showNotification(context: Context, notificationId: String, title: String, message: String)
  }

  class Resource {
    + Success
    + Error
    + Loading
  }
}

' Relasi utama
User "1" *-- "1" NotificationPreferences: contains
ScheduleResponse "1" *-- "*" Schedule: contains

ScheduleRepository --> ApiClient: uses
ScheduleRepository --> Schedule: manages
ScheduleRepository --> ScheduleNotification: manages
ApiClient --> ApiService: creates

HomeViewModel --> ScheduleRepository: uses
CalendarViewModel --> ScheduleRepository: uses
NotificationViewModel --> ScheduleRepository: uses
ProfileViewModel --> User: manages

HomeFragment --> HomeViewModel: uses
CalendarFragment --> CalendarViewModel: uses
NotificationFragment --> NotificationViewModel: uses
ProfileFragment --> ProfileViewModel: uses
NotificationDetailActivity --> NotificationViewModel: uses
MainActivity --> HomeFragment: displays
MainActivity --> CalendarFragment: displays
MainActivity --> NotificationFragment: displays
MainActivity --> ProfileFragment: displays

HomeViewModel --> LocationUtils: uses
HomeViewModel --> NotificationUtils: uses
NotificationUtils --> ScheduleRepository: uses
NotificationUtils --> ScheduleNotification: creates

@enduml