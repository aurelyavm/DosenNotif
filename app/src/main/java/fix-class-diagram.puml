@startuml "DosenNotif - Final Clean Class Diagram"
top to bottom direction
skinparam classAttributeIconSize 0
skinparam backgroundColor white
skinparam ArrowColor #666666
skinparam packageStyle rectangle

' Model
package "Model" #DEEBD8 {
  class User {
    + id: String
    + name: String
    + email: String
    + nidn: String
    + createdAt: Long
  }

  class Schedule {
    + id_dosen: String
    + nama_dosen: String
    + nidn_dosen: String
    + id_periode: String
    + id_program_studi: String
    + nama_program_studi: String
    + kode_mata_kuliah: String
    + nama_mata_kuliah: String
    + sks: String
    + kelas: String
    + hari: String
    + jam_mulai: String
    + jam_selesai: String
    + ruang: String
    + getFormattedDay(): String
    + getStartTime(): Date?
    + getEndTime(): Date?
    + getFormattedStartTime(): String
    + getFormattedEndTime(): String
    + getTimeRange(): String
    + getDayOfWeekNumber(): Int
    + equals(): Boolean
    + hashCode(): Int
  }

  class ScheduleNotification {
    + id: String
    + scheduleId: String
    + title: String
    + message: String
    + scheduledTime: Long
    + actualScheduleTime: Long
    + room: String
    + courseName: String
    + className: String
    + isRead: Boolean
    + createdAt: Long
  }

  class ScheduleResponse {
    + status: String
    + message: String
    + data: List<Schedule>
  }
}

' Repository
package "Repository" #D5E8F9 {
  class ScheduleRepository {
    - apiService: ApiService
    - firestore: FirebaseFirestore
    - facultyDepartmentIds: List<String>
    + getLecturerSchedule(lecturerNidn: String, period: String): Resource<List<Schedule>>
    + saveNotification(userId: String, notification: ScheduleNotification): Resource<String>
    + getUserNotifications(userId: String): Resource<List<ScheduleNotification>>
    + markNotificationAsRead(userId: String, notificationId: String): Resource<Unit>
  }
}

' API
package "API" #D5E1F9 {
  object ApiClient {
    - BASE_URL: String
    - CUSTOM_HEADERS: Map<String, String>
    - USERNAME: String
    - PASSWORD: String
    - getAuthorizationHeader(): String
    + create(): ApiService
  }

  interface ApiService {
    + getLecturerSchedule(idProgramStudi: RequestBody, idPeriode: RequestBody): ScheduleResponse
  }

  class CustomHeadersInterceptor {
    - headers: Map<String, String>
    - authorizationHeader: String
    + intercept(chain: Interceptor.Chain): Response
  }
}

' Service
package "Service" #F0E6FF {
  class RealtimeScheduleService {
    - repository: ScheduleRepository
    - serviceScope: CoroutineScope
    + onCreate()
    + onStartCommand(): Int
    - runRealtimeCheckLoop()
    - getUserData(userId: String): User?
    - createForegroundNotificationChannel()
    - buildForegroundNotification(content: String): Notification
  }
}

' ViewModel
package "ViewModel" #F9E4D5 {
  class HomeViewModel {
    - repository: ScheduleRepository
    - firestore: FirebaseFirestore
    - auth: FirebaseAuth
    + distanceFromCampus: LiveData<Float>
    + currentLocation: LiveData<Location>
    + userData: LiveData<User>
    + scheduleState: StateFlow<Resource<List<Schedule>>>
    + todaySchedules: LiveData<List<Schedule>>
    + loadUserData()
    + loadSchedules(nidn: String, period: String)
    + updateCurrentLocation(location: Location)
    - filterTodaySchedules(schedules: List<Schedule>)
    - scheduleNotifications(schedules: List<Schedule>)
  }

  class CalendarViewModel {
    - repository: ScheduleRepository
    - firestore: FirebaseFirestore
    - auth: FirebaseAuth
    + availablePeriods: List<Pair<String, String>>
    + selectedPeriod: LiveData<String>
    + scheduleState: StateFlow<Resource<List<Schedule>>>
    + schedulesByDay: LiveData<Map<String, List<Schedule>>>
    + loadUserData()
    + loadSchedules(nidn: String, period: String)
    + selectPeriod(period: String)
    - groupSchedulesByDay(schedules: List<Schedule>)
    + getSchedulesForDay(day: String): List<Schedule>
    + getAllSchedules(): List<Schedule>
  }

  class NotificationViewModel {
    - repository: ScheduleRepository
    - auth: FirebaseAuth
    + notificationsState: StateFlow<Resource<List<ScheduleNotification>>>
    + loadNotifications()
    + markNotificationAsRead(notificationId: String)
    + getUnreadCount(): Int
  }

  class ProfileViewModel {
    - firestore: FirebaseFirestore
    - auth: FirebaseAuth
    - repository: ScheduleRepository
    + userData: LiveData<User>
    + userSchedules: LiveData<List<Schedule>>
    + nextClass: LiveData<Schedule>
    + loadUserData()
    - loadSchedules(nidn: String, period: String)
    - findNextClass(schedules: List<Schedule>)
    + refreshSchedule()
    + signOut()
  }
}

' UI Activities
package "UI.Activities" #FFF9D5 {
  class MainActivity {
    - binding: ActivityMainBinding
    - auth: FirebaseAuth
    + onCreate(savedInstanceState: Bundle)
    - requestRequiredPermissions()
    - startRealtimeScheduleService()
  }

  class LoginActivity {
    - binding: ActivityLoginBinding
    - auth: FirebaseAuth
    + onCreate(savedInstanceState: Bundle)
    - loginUser()
  }

  class RegisterActivity {
    - binding: ActivityRegisterBinding
    - auth: FirebaseAuth
    - firestore: FirebaseFirestore
    + onCreate(savedInstanceState: Bundle)
    - registerUser()
    - checkNidnAvailability()
    - createUserAccount()
  }

  class SplashActivity {
    - binding: ActivitySplashBinding
    - auth: FirebaseAuth
    + onCreate(savedInstanceState: Bundle)
    - setupAnimation()
    - navigateToNextScreen()
  }
}

' UI Fragments
package "UI.Fragments" #FFF9D5 {
  class HomeFragment {
    - viewModel: HomeViewModel
    - scheduleAdapter: ScheduleAdapter
    + onCreateView(): View
    - refreshData()
    - setupRecyclerView()
    - setGreeting()
    - observeViewModel()
    - requestLocationUpdates()
  }

  class CalendarFragment {
    - viewModel: CalendarViewModel
    - scheduleAdapter: ScheduleDayAdapter
    - selectedDay: String
    + onCreateView(): View
    - refreshData()
    - setupPeriodSpinner()
    - setupDayFilter()
    - filterSchedules()
    - observeViewModel()
  }

  class NotificationFragment {
    - viewModel: NotificationViewModel
    - notificationAdapter: NotificationAdapter
    + onCreateView(): View
    - setupRecyclerView()
    - observeNotifications()
  }

  class ProfileFragment {
    - viewModel: ProfileViewModel
    + onCreateView(): View
    - setupListeners()
    - observeUserData()
    - updateScheduleStats()
    - updateNextClassInfo()
  }
}

' UI Adapters
package "UI.Adapters" #FFF9D5 {
  class ScheduleAdapter {
    - schedules: List<Schedule>
    + onCreateViewHolder(): ScheduleViewHolder
    + onBindViewHolder()
    + updateSchedules(newSchedules: List<Schedule>)
  }

  class ScheduleDayAdapter {
    - schedulesByDay: Map<String, List<Schedule>>
    + onCreateViewHolder(): DayViewHolder
    + onBindViewHolder()
    + updateSchedules(newSchedulesByDay: Map<String, List<Schedule>>)
  }

  class ScheduleItemAdapter {
    - schedules: List<Schedule>
    + onCreateViewHolder(): ScheduleItemViewHolder
    + onBindViewHolder()
  }

  class NotificationAdapter {
    - notifications: List<ScheduleNotification>
    - onItemClick: (ScheduleNotification) -> Unit
    + onCreateViewHolder(): NotificationViewHolder
    + onBindViewHolder()
    + updateNotifications(newNotifications: List<ScheduleNotification>)
  }
}

' Utilities
package "Utils" #E9E9E9 {
  object LocationUtils {
    - UPNVJ_LATITUDE: Double
    - UPNVJ_LONGITUDE: Double
    + calculateDistance(): Float
    + calculateDistanceFromCampus(latitude: Double, longitude: Double): Float
    + getNotificationDelay(distanceInKm: Float): Int
    + getLocationUpdates(context: Context): Flow<Location>
    + getLastLocation(context: Context): Location?
  }

  object NotificationUtils {
    - CHANNEL_ID: String
    - CHANNEL_NAME: String
    + createNotificationChannel(context: Context)
    + scheduleNotification(context: Context, schedule: Schedule, delayMinutes: Int)
    + showNotification(context: Context, ...)
    - extractCourseNameFromTitle(title: String): String
  }

  class Resource {
    + Success<T>
    + Error
    + Loading
  }

  class AlarmReceiver {
    + onReceive(context: Context, intent: Intent)
  }

  class BootReceiver {
    + onReceive(context: Context, intent: Intent)
  }
}

' Relasi utama
ScheduleResponse "1" *-- "*" Schedule: contains

ScheduleRepository --> ApiClient: uses
ScheduleRepository --> Schedule: manages
ScheduleRepository --> ScheduleNotification: manages
ApiClient --> ApiService: creates
ApiClient --> CustomHeadersInterceptor: uses

HomeViewModel --> ScheduleRepository: uses
CalendarViewModel --> ScheduleRepository: uses
NotificationViewModel --> ScheduleRepository: uses
ProfileViewModel --> ScheduleRepository: uses

HomeFragment --> HomeViewModel: uses
CalendarFragment --> CalendarViewModel: uses
NotificationFragment --> NotificationViewModel: uses
ProfileFragment --> ProfileViewModel: uses

MainActivity --> HomeFragment: hosts
MainActivity --> CalendarFragment: hosts
MainActivity --> NotificationFragment: hosts
MainActivity --> ProfileFragment: hosts
MainActivity --> RealtimeScheduleService: starts

LoginActivity --> RegisterActivity: navigates
RegisterActivity --> LoginActivity: navigates
SplashActivity --> MainActivity: navigates
SplashActivity --> LoginActivity: navigates

HomeFragment --> ScheduleAdapter: uses
CalendarFragment --> ScheduleDayAdapter: uses
ScheduleDayAdapter --> ScheduleItemAdapter: uses
NotificationFragment --> NotificationAdapter: uses

HomeViewModel --> LocationUtils: uses
HomeViewModel --> NotificationUtils: uses
RealtimeScheduleService --> LocationUtils: uses
RealtimeScheduleService --> NotificationUtils: uses
NotificationUtils --> AlarmReceiver: schedules
AlarmReceiver --> NotificationUtils: triggers
BootReceiver --> RealtimeScheduleService: starts

@enduml