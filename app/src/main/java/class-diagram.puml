@startuml

' Package API
package com.example.dosennotif.api {
  object ApiClient {
    - BASE_URL: String
    - CUSTOM_HEADERS: Map<String, String>
    - USERNAME: String
    - PASSWORD: String
    - getAuthorizationHeader(): String
    + create(): ApiService
  }

  interface ApiService {
    + getLecturerSchedule(idProgramStudi: RequestBody, idPeriode: RequestBody): ScheduleResponse
  }

  class BasicAuthInterceptor {
    - username: String
    - password: String
    + intercept(chain: Chain): Response
  }

  class CustomHeadersInterceptor {
    - headers: Map<String, String>
    - authorizationHeader: String
    + intercept(chain: Chain): Response
  }
}

' Package Model
package com.example.dosennotif.model {
  class NotificationPreferences {
    + enabled: Boolean
    + soundEnabled: Boolean
    + vibrationEnabled: Boolean
    + distanceThresholds: Map<String, Int>
  }

  class Schedule {
    + id_dosen: String
    + nama_dosen: String
    + nidn_dosen: String
    + id_periode: String
    + id_program_studi: String
    + nama_program_studi: String
    + kode_mata_kuliah: String
    + nama_mata_kuliah: String
    + sks: String
    + kelas: String
    + hari: String
    + jam_mulai: String
    + jam_selesai: String
    + ruang: String
    + getFormattedDay(): String
    + getStartTime(): Date?
    + getEndTime(): Date?
    + getFormattedStartTime(): String
    + getFormattedEndTime(): String
    + getTimeRange(): String
    + getDayOfWeekNumber(): Int
    + equals(other: Any?): Boolean
    + hashCode(): Int
  }

  class ScheduleNotification {
    + id: String
    + scheduleId: String
    + title: String
    + message: String
    + scheduledTime: Long
    + actualScheduleTime: Long
    + room: String
    + courseName: String
    + className: String
    + isRead: Boolean
    + createdAt: Long
  }

  class ScheduleResponse {
    + status: String
    + message: String
    + data: List<Schedule>?
  }

  class User {
    + id: String
    + name: String
    + email: String
    + nidn: String
    + createdAt: Long
    + notificationPreferences: NotificationPreferences
  }
}

' Package Repository
package com.example.dosennotif.repository {
  class ScheduleRepository {
    - apiService: ApiService
    - firestore: FirebaseFirestore
    - TAG: String
    - facultyDepartmentIds: List<String>
    + getLecturerSchedule(lecturerNidn: String, period: String): Resource
    + saveNotification(userId: String, notification: ScheduleNotification): Resource
    + getUserNotifications(userId: String): Resource
    + markNotificationAsRead(userId: String, notificationId: String): Resource
  }
}

' Package UI
package com.example.dosennotif.ui {
  ' Auth package
  package com.example.dosennotif.ui.auth {
    class LoginActivity {
      - binding: ActivityLoginBinding
      - auth: FirebaseAuth
      + onCreate(savedInstanceState: Bundle?)
      - loginUser()
    }

    class RegisterActivity {
      - binding: ActivityRegisterBinding
      - auth: FirebaseAuth
      - firestore: FirebaseFirestore
      + onCreate(savedInstanceState: Bundle?)
      - registerUser()
    }
  }

  ' Calendar package
  package com.example.dosennotif.ui.calendar {
    class CalendarFragment {
      - binding: FragmentCalendarBinding
      - viewModel: CalendarViewModel
      - scheduleAdapter: ScheduleDayAdapter
      - selectedDay: String?
      + onCreateView(): View
      + onViewCreated(view: View, savedInstanceState: Bundle?)
      - refreshData()
      - setupPeriodSpinner()
      - setupDayFilter()
      - setupRecyclerView()
      - filterSchedules()
      - observeViewModel()
    }

    class ScheduleDayAdapter {
      - schedulesByDay: Map<String, List<Schedule>>
      + onCreateViewHolder(): DayViewHolder
      + onBindViewHolder(holder: DayViewHolder, position: Int)
      + getItemCount(): Int
      + updateSchedules(newSchedulesByDay: Map<String, List<Schedule>>?)
      ~ DayViewHolder
    }

    class ScheduleItemAdapter {
      - schedules: List<Schedule>
      + onCreateViewHolder(): ScheduleItemViewHolder
      + onBindViewHolder(holder: ScheduleItemViewHolder, position: Int)
      + getItemCount(): Int
      ~ ScheduleItemViewHolder
    }
  }

  ' Home package
  package com.example.dosennotif.ui.home {
    class HomeFragment {
      - binding: FragmentHomeBinding
      - viewModel: HomeViewModel
      - scheduleAdapter: ScheduleAdapter
      + onCreateView(): View
      + onViewCreated(view: View, savedInstanceState: Bundle?)
      - refreshData()
      - setupRecyclerView()
      - setGreeting()
      - observeViewModel()
      - updateScheduleList(schedules: List<Schedule>?)
      - requestLocationUpdates()
    }

    class ScheduleAdapter {
      - schedules: List<Schedule>
      + onCreateViewHolder(): ScheduleViewHolder
      + onBindViewHolder(holder: ScheduleViewHolder, position: Int)
      + getItemCount(): Int
      + updateSchedules(newSchedules: List<Schedule>?)
      ~ ScheduleViewHolder
    }
  }

  ' Main package
  package com.example.dosennotif.ui.main {
    class MainActivity {
      - binding: ActivityMainBinding
      - auth: FirebaseAuth
      - LOCATION_PERMISSION_REQUEST_CODE: Int
      - NOTIFICATION_PERMISSION_REQUEST_CODE: Int
      + onCreate(savedInstanceState: Bundle?)
      - requestRequiredPermissions()
      + onRequestPermissionsResult()
      - checkNotificationPermission()
    }
  }

  ' Notification package
  package com.example.dosennotif.ui.notification {
    class NotificationAdapter {
      - notifications: List<ScheduleNotification>
      - onItemClick: (ScheduleNotification) -> Unit
      + onCreateViewHolder(): NotificationViewHolder
      + onBindViewHolder(holder: NotificationViewHolder, position: Int)
      + getItemCount(): Int
      + updateNotifications(newNotifications: List<ScheduleNotification>)
      ~ NotificationViewHolder
    }

    class NotificationDetailActivity {
      - binding: ActivityNotificationDetailBinding
      - viewModel: NotificationViewModel
      + onCreate(savedInstanceState: Bundle?)
      - observeSelectedNotification()
      - openCampusMap()
      + onDestroy()
    }

    class NotificationFragment {
      - binding: FragmentNotificationBinding
      - viewModel: NotificationViewModel
      - notificationAdapter: NotificationAdapter
      + onCreateView(): View
      + onViewCreated(view: View, savedInstanceState: Bundle?)
      - setupRecyclerView()
      - observeNotifications()
      - updateNotificationList(notifications: List<ScheduleNotification>)
      + onResume()
    }
  }

  ' Profile package
  package com.example.dosennotif.ui.profile {
    class ProfileFragment {
      - binding: FragmentProfileBinding
      - viewModel: ProfileViewModel
      + onCreateView(): View
      + onViewCreated(view: View, savedInstanceState: Bundle?)
      - setupListeners()
      - observeUserData()
      - updateDistanceThresholds(thresholds: Map<String, Int>)
      - updateNotificationToggles(enabled: Boolean)
      - saveSettings()
    }
  }

  ' Splash package
  package com.example.dosennotif.ui.splash {
    class SplashActivity {
      - binding: ActivitySplashBinding
      - auth: FirebaseAuth
      - SPLASH_DISPLAY_LENGTH: Long
      + onCreate(savedInstanceState: Bundle?)
      - setupAnimation()
      - navigateToNextScreen()
    }
  }
}

' Package Utils
package com.example.dosennotif.utils {
  class AlarmReceiver {
    + onReceive(context: Context?, intent: Intent?)
  }

  class BootReceiver {
    - repository: ScheduleRepository
    + onReceive(context: Context?, intent: Intent?)
    - getUserData(userId: String): User?
  }

  class DismissReceiver {
    + onReceive(context: Context?, intent: Intent?)
  }

  object LocationUtils {
    - UPNVJ_LATITUDE: Double
    - UPNVJ_LONGITUDE: Double
    + calculateDistance(): Float
    + calculateDistanceFromCampus(latitude: Double, longitude: Double): Float
    + getNotificationDelay(distanceInKm: Float): Int
    + getLocationUpdates(context: Context, intervalMs: Long): Flow
    + getLastLocation(context: Context): Location?
  }

  object NotificationUtils {
    - CHANNEL_ID: String
    - CHANNEL_NAME: String
    - CHANNEL_DESCRIPTION: String
    - repository: ScheduleRepository
    + createNotificationChannel(context: Context)
    + scheduleNotification(context: Context, schedule: Schedule, delayMinutes: Int)
    + showNotification(context: Context, notificationId: String, title: String, message: String, userId: String?)
  }

  class Resource {
    + Success
    + Error
    + Loading
    + loading()
    + success(data)
    + error(message)
  }

  class SnoozeReceiver {
    + onReceive(context: Context?, intent: Intent?)
  }
}

' Package ViewModel
package com.example.dosennotif.viewmodel {
  class CalendarViewModel {
    - repository: ScheduleRepository
    - firestore: FirebaseFirestore
    - auth: FirebaseAuth
    + availablePeriods: List
    - _selectedPeriod: MutableLiveData
    + selectedPeriod: LiveData
    - _scheduleState: MutableStateFlow
    + scheduleState: StateFlow
    - _userData: MutableLiveData
    - _schedulesByDay: MutableLiveData
    + schedulesByDay: LiveData
    + loadUserData()
    + loadSchedules(nidn: String, period: String)
    + selectPeriod(period: String)
    - groupSchedulesByDay(schedules: List<Schedule>?)
    + getSchedulesForDay(day: String): List<Schedule>
    + getAllSchedules(): List<Schedule>
  }

  class HomeViewModel {
    - repository: ScheduleRepository
    - firestore: FirebaseFirestore
    - auth: FirebaseAuth
    - _distanceFromCampus: MutableLiveData
    + distanceFromCampus: LiveData
    - _currentLocation: MutableLiveData
    + currentLocation: LiveData
    - _userData: MutableLiveData
    + userData: LiveData
    - _scheduleState: MutableStateFlow
    + scheduleState: StateFlow
    - _todaySchedules: MutableLiveData
    + todaySchedules: LiveData
    - currentDayOfWeek: Int
    + loadUserData()
    + loadSchedules(nidn: String, period: String)
    - filterTodaySchedules(schedules: List<Schedule>)
    - scheduleNotifications(schedules: List<Schedule>)
    + updateCurrentLocation(location: Location)
    + getFormattedDistance(): String
  }

  class NotificationViewModel {
    - repository: ScheduleRepository
    - auth: FirebaseAuth
    - _notificationsState: MutableStateFlow
    + notificationsState: StateFlow
    - _selectedNotification: MutableLiveData
    + selectedNotification: LiveData
    + loadNotifications()
    + getNotificationById(notificationId: String)
    + markNotificationAsRead(notificationId: String)
    + clearSelectedNotification()
    + getUnreadCount(): Int
  }

  class ProfileViewModel {
    - firestore: FirebaseFirestore
    - auth: FirebaseAuth
    - _userData: MutableLiveData
    + userData: LiveData
    - _savingState: MutableLiveData
    + savingState: LiveData
    + loadUserData()
    + updateNotificationPreferences(preferences: NotificationPreferences)
    + updateDistanceThreshold(range: String, minutes: Int)
    + signOut()
  }
}

' Relationships
ApiClient --> ApiService : creates
CustomHeadersInterceptor --> BasicAuthInterceptor : uses
ScheduleRepository --> ApiClient : uses
ScheduleRepository --> Schedule : manages
ScheduleRepository --> ScheduleNotification : manages

User "1" *-- "1" NotificationPreferences : contains
ScheduleResponse "1" *-- "*" Schedule : contains

CalendarViewModel --> ScheduleRepository : uses
CalendarViewModel --> User : manages
HomeViewModel --> ScheduleRepository : uses
HomeViewModel --> User : manages
HomeViewModel --> Schedule : manages
NotificationViewModel --> ScheduleRepository : uses
NotificationViewModel --> ScheduleNotification : manages
ProfileViewModel --> User : manages
ProfileViewModel --> NotificationPreferences : manages

ScheduleDayAdapter "1" *-- "*" ScheduleItemAdapter : contains

LoginActivity --> MainActivity : navigates to
RegisterActivity --> LoginActivity : navigates to
SplashActivity --> LoginActivity : navigates to
SplashActivity --> MainActivity : navigates to

CalendarFragment --> CalendarViewModel : uses
CalendarFragment --> ScheduleDayAdapter : uses
HomeFragment --> HomeViewModel : uses
HomeFragment --> ScheduleAdapter : uses
NotificationFragment --> NotificationViewModel : uses
NotificationFragment --> NotificationAdapter : uses
NotificationDetailActivity --> NotificationViewModel : uses
ProfileFragment --> ProfileViewModel : uses

NotificationUtils --> ScheduleRepository : uses
NotificationUtils --> ScheduleNotification : creates
NotificationUtils --> AlarmReceiver : schedules
BootReceiver --> ScheduleRepository : uses
BootReceiver --> LocationUtils : uses
BootReceiver --> NotificationUtils : uses

@enduml